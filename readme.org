#+TITLE: Detecting Closures In A Bit Map
#+AUTHOR: Scott Wang
#+EMAIL: scott.wang@theweflex.com
#+STARTUP: align indent
#+LANGUAGE: en
#+PROPERTY: header-args :mkdirp true

* Objectives

This is a challenge (a interview question) repo. If you are
considering joining [[https://github.com/weflex][WeFlex]], you can fork this repo, complete the quest
and [[https://github.com/scottoasis/closure-detect/compare][submit a PullRequst]] back to me.


** Languages Available

At this moment, this quest is available in these programming languages:

- [[https://github.com/scottoasis/closure-detect/blob/javascript/readme.org][Javascript]]
- [[https://github.com/scottoasis/closure-detect/blob/java/readme.org][Java]]


* The Quest

You are working on a project dealing with ASCII texts. Each of these
texts is an graphical image (=Glyph=), drew with ASCII
characters. Characters, including white spaces, are known as =Pixels=,
as they are very similar to pixels on LCD panels. [[dog.ascii][Below]] is an example
of an image produced by anonymous artist. It is 15 chars wide and 6
chars high.

#+NAME: dog.ascii
#+BEGIN_SRC picture :tangle test/fixtures/dog.ascii :exports code
               
     /|_.      
    /    `-.   
   /   .__/    
   \___|       
               
#+END_SRC

Your task in this project is to detect if its path is closed. If it is
closed, we call it a =Closure=.


** Is it a closure?

A rectangle is a closure.

#+BEGIN_SRC picture :tangle test/fixtures/rect.ascii :exports code
 
 +-----+
 |     |
 |     |
 +-----+
       
#+END_SRC

A triangle is a closure.

#+BEGIN_SRC picture :tangle test/fixtures/triangle.ascii :exports code

    +
   / \
  /   \
 +-----+
        
#+END_SRC

But a short line is not a closure.

#+BEGIN_SRC picture :tangle test/fixtures/line.ascii :exports code
    
  ++ 
 
 #+END_SRC


* Helpers

We have already wrote a helper function to read and generate data
structures you may need.

Function =readGlyph(fpath)= reads contents of file =fpath= and returns
an object with =width=, =height= of the glyph and a function =charAt=
you can use to get content of a glyph at given position =x, y=.

#+BEGIN_SRC javascript :tangle lib/read-glyph.js :exports code
var fs = require('fs');

function readGlyph (fpath) {

  var chars = fs.readFileSync(fpath);
  var glyph = {
    w:   0,
    h:   0,
    x:   0,
    y:   0,
    buf: [[]]
  };

  chars.forEach(function (ch, pos) {
    if (0x0a === ch) {
      glyph.h += 1;
      glyph.y = glyph.h - 1;
      glyph.w = (glyph.x > glyph.w) ? glyph.x : glyph.w;
      glyph.x = 0;
      glyph.buf.push([]);
      return;
    }
    glyph.buf[glyph.y][glyph.x] = ch;
    glyph.x++;
  });

  return {
    width: glyph.w,
    height: glyph.h,
    charAt: function (x, y) {
      if (x < glyph.w && y < glyph.h) {
        return glyph.buf[y][x] || 0x20;
      } else {
        throw 'Request exceeds size of glyph';
      }
    }
  };
}

module.exports = readGlyph;
#+END_SRC

Your task is to modify the function body of =isClosure()= in
=lib/is-closure.js=, make it return true when the input =glyph= object
is a =Closure=.

#+BEGIN_SRC javascript :tangle lib/is-closure.js :exports code
function isClosure (glyph) {
  // TODO: 
  return false;
}

module.exports = isClosure;
#+END_SRC


* Running Test Cases

To help you figure out if you had walking on the right path, we have
also made a few test cases. To test your code, do

#+BEGIN_SRC shell-script
make test
#+END_SRC

or you can test it with =node= directly

#+BEGIN_SRC shell-script
node test/test.js
#+END_SRC

